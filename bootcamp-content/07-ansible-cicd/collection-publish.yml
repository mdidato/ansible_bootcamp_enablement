---
- name: Publish collections to Hub
  hosts: localhost
  gather_facts: false
  vars:
    ansible_async_dir: "{{ aap_configuration_async_dir | default('/tmp/ansible') }}"
    aap_configuration_working_dir: "/tmp"
    hub_configuration_publish_loop_delay: 5
    hub_configuration_publish_async_timeout: 10
    aap_request_timeout: 300
    aap_hostname: https://aap-aap.apps.cluster-bmgbv.dynamic.redhatworkshops.io
    aap_username: admin
    aap_password: "{{ lookup('ansible.builtin.env', 'AAP_PASSWORD') }}"
    aap_validate_certs: false
    ah_auto_approve: false
    ah_overwrite_existing: true
    ah_namespace: "{{ (hub_collections[0].collection_name | basename).split('.')[0] }}"
    ah_collection_name: "{{ (hub_collections[0].collection_name | basename).split('.')[1] }}"
    hub_collections:
      - collection_name: binbashroot.provision
        git_url: https://github.com/binbashroot/binbashroot_provision_collection
  no_log: "{{ hub_configuration_publish_secure_logging | default('false') }}"
  tasks:
    - name: Git checkout
      ansible.builtin.git:
        repo: "{{ __ah_collection_item.git_url }}"
        dest: "{{ aap_configuration_working_dir }}/{{ __ah_collection_item.collection_name }}/"
        version: "{{ __ah_collection_item.version | default(omit) }}"
        key_file: "{{ __ah_collection_item.key_path | default(omit) }}"
        ssh_opts: "{{ __ah_collection_item.ssh_opts | default(omit) }}"
      loop: "{{ hub_collections }}"
      loop_control:
        loop_var: __ah_collection_item
        pause: "{{ hub_configuration_publish_loop_delay }}"
      when:
        - ah_collection_list is not defined
        - __ah_collection_item.collection_local_path is not defined
      tags:
        - git-checkout

    - name: Build Collections
      ansible.hub.ah_build:
        path: "{{ aap_configuration_working_dir }}/{{ __ah_collection_item.collection_name }}"
        output_path: "{{ aap_configuration_working_dir }}/{{ __ah_collection_item.collection_name }}"
        force: true
      register: ah_build_results
      loop: "{{ hub_collections }}"
      loop_control:
        loop_var: __ah_collection_item
      when: ah_collection_list is not defined
      tags:
        - collection-build

    - name: Create PAH namespace
      ansible.hub.ah_namespace:
        name: "{{ (__ah_collection_item.collection_name | basename).split('.')[0] }}"
        state: present
        ah_host: "{{ aap_hostname | default(omit) }}"
        ah_username: "{{ aap_username | default(omit) }}"
        ah_password: "{{ aap_password | default(omit) }}"
        validate_certs: "{{ aap_validate_certs | default(omit) }}"
      loop: "{{ hub_collections }}"
      loop_control:
        loop_var: __ah_collection_item
      tags:
        - pah-namespace

    - name: Get token
      ansible.hub.ah_token:
        ah_host: "{{ aap_hostname | default(omit) }}"
        ah_username: "{{ aap_username | default(omit) }}"
        ah_password: "{{ aap_password | default(omit) }}"
        ah_path_prefix: "{{ hub_path_prefix | default(ah_path_prefix | default(omit)) }}"
        validate_certs: "{{ aap_validate_certs | default(omit) }}"
        request_timeout: "{{ aap_request_timeout | default(omit) }}"
      when:
        - hub_token is not defined
        - lookup("ansible.builtin.env", "AH_API_TOKEN") == ""
      tags:
        - collection-publish
        - collection-approve

    - name: Read in galaxy file
      ansible.builtin.slurp:
        src: "/tmp/binbashroot.provision/galaxy.yml"
      register: file_content
      tags:
        - collection-publish
        - collection-approve

    - name: Get collection Version
      ansible.builtin.set_fact:
        collection_version: "{{ file_content['content'] | b64decode |split('\n') |select('match', 'version') | first |split() | last }}"
      tags:
        - collection-publish
        - collection-approve

    - name: Publish Collections
      ansible.hub.ah_collection:
        namespace: "{{ (__ah_collection_item.collection_name | basename).split('.')[0] }}"
        name: "{{ (__ah_collection_item.collection_name | basename).split('.')[1] }}"
        version: "{{ collection_version }}"
        path: "{{aap_configuration_working_dir}}/{{__ah_collection_item.collection_name}}/{{ah_namespace}}-{{ah_collection_name}}-{{collection_version}}.tar.gz"
        auto_approve: "{{ ah_auto_approve }}"
        overwrite_existing: "{{ ah_overwrite_existing }}"
        ah_host: "{{ aap_hostname | default(omit) }}"
        ah_username: "{{ aap_username | default(omit) }}"
        ah_password: "{{ aap_password | default(omit) }}"
        ah_token: "{{ hub_token | default(omit) }}"
        validate_certs: "{{ aap_validate_certs | default(omit) }}"
        request_timeout: "{{ aap_request_timeout | default(omit) }}"
      loop: "{{ hub_collections }}"
      loop_control:
        loop_var: __ah_collection_item
      register: publish
      retries: 3
      delay: 2
      until: not publish is failed
      tags:
        - collection-publish

    - name: Approve Collections
      ansible.hub.ah_approval:
        namespace: "{{ (__ah_collection_item.collection_name | basename).split('.')[0] }}"
        name: "{{ (__ah_collection_item.collection_name | basename).split('.')[1] }}"
        version: "{{ collection_version }}"
        ah_username: "{{ aap_username | default(omit) }}"
        ah_password: "{{ aap_password | default(omit) }}"
        ah_token: "{{ hub_token | default(omit) }}"
        ah_host: "{{ aap_hostname | default(omit) }}"
        validate_certs: "{{ aap_validate_certs | default(omit) }}"
        request_timeout: "{{ aap_request_timeout | default(omit) }}"
      loop: "{{ hub_collections }}"
      loop_control:
        loop_var: __ah_collection_item
      when:
        - not ah_auto_approve
      register: approval
      retries: 3
      delay: 2
      until: not approval is failed
      tags:
        - collection-approve
